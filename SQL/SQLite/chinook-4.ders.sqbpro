<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/sagla/OneDrive/Masaüstü/Computer Teacher/SQL/SQLite/chinook.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="browser structure pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="3862"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,8:maininvoices"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="63"/><column index="2" value="300"/><column index="3" value="61"/></column_widths><filter_values><column index="2" value="fac"/></filter_values><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="8" mode="1"/></sort><column_widths><column index="1" value="85"/><column index="2" value="73"/><column index="3" value="83"/><column index="4" value="294"/><column index="5" value="264"/><column index="6" value="132"/><column index="7" value="46"/><column index="8" value="96"/><column index="9" value="82"/><column index="10" value="128"/><column index="11" value="122"/><column index="12" value="183"/><column index="13" value="100"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="invoices" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="70"/><column index="2" value="85"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="82"/><column index="7" value="98"/><column index="8" value="118"/><column index="9" value="42"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="7" mode="0"/></sort><column_widths><column index="1" value="58"/><column index="2" value="300"/><column index="3" value="63"/><column index="4" value="92"/><column index="5" value="61"/><column index="6" value="300"/><column index="7" value="86"/><column index="8" value="63"/><column index="9" value="67"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">SELECT * FROM carsalesEmployees WHERE salary&gt;(SELECT salary FROM carsalesEmployees WHERE name=&quot;Rubie&quot;);

SELECT name, surname, salary FROM carsalesEmployees WHERE salary&gt;(SELECT avg(salary) FROM carsalesEmployees);

SELECT avg(salary) FROM carsalesEmployees;

SELECT tracks.TrackId,tracks.Name,AlbumId FROM tracks WHERE AlbumId IN (SELECT AlbumId FROM albums WHERE Title=&quot;Faceless&quot;);
--iç içe sorgu
SELECT TrackId, name, AlbumId FROM tracks WHERE AlbumId=(SELECT  AlbumId  FROM albums WHERE Title = &quot;Faceless&quot;);
--JOIN
select tracks.trackid, tracks.name, tracks.AlbumId from tracks inner join albums on tracks.albumid=albums.albumid 
where albums.Title = &quot;Faceless&quot;;

--iç içe sorgu
SELECT TrackId, name, AlbumId FROM tracks WHERE AlbumId=(SELECT  AlbumId  FROM albums WHERE Title in(&quot;Faceless&quot;, &quot;Let There Be Rock&quot;));
SELECT TrackId, name, AlbumId FROM tracks WHERE AlbumId in(SELECT  AlbumId  FROM albums WHERE Title in(&quot;Faceless&quot;, &quot;Let There Be Rock&quot;));

--join ile
SELECT tracks.TrackId, tracks.Name, tracks.AlbumId FROM tracks 
INNER JOIN albums on tracks.AlbumId = albums.AlbumId 
WHERE Title in ( &quot;Faceless&quot;,&quot;Let There Be Rock&quot;);

--hangi artist hangi albümü çıkartmış
SELECT artists.Name, albums.Title from  artists INNER JOIN albums ON albums.ArtistId=artists.ArtistId;

--albumu olmayan artisleri getir
SELECT artists.Name, albums.Title FROM artists LEFT JOIN albums ON artists.ArtistId=albums.ArtistId;

SELECT count(artists.Name) as albumu_olmayan_artisler FROM artists LEFT JOIN albums ON artists.ArtistId=albums.ArtistId 
WHERE albums.Title is NULL;

--hangi artistin kaç albümü var
SELECT artists.Name, count(albums.Title) FROM artists 
INNER JOIN albums ON  artists.ArtistId=albums.ArtistId GROUP BY artists.ArtistId;

SELECT DISTINCT(name) FROM artists;

SELECT customers.CustomerId, customers.FirstName, customers.Country, invoices.total from invoices inner join customers on invoices.CustomerId = customers.CustomerId 
where invoices.BillingCountry in (&quot;Brazil&quot;, &quot;Germany&quot;, &quot;Canada&quot;) group by invoices.BillingCountry;

select invoices.CustomerId, customers.FirstName, customers.LastName, invoices.BillingCountry, invoices.total
from invoices inner join customers on invoices.CustomerId = customers.CustomerId 
where invoices.BillingCountry in (&quot;Brazil&quot;, &quot;Germany&quot;, &quot;Canada&quot;);


select invoices.BillingCountry, sum(invoices.total) 
from invoices inner join customers on invoices.CustomerId = customers.CustomerId 
where invoices.BillingCountry in (&quot;Brazil&quot;, &quot;Germany&quot;, &quot;Canada&quot;) group by invoices.BillingCountry;

SELECT Composer, count(name) FROM tracks GROUP BY Composer HAVING count(name)&gt;10 AND Composer like &quot;A%&quot;;

SELECT Composer, count(name) FROM tracks WHERE Milliseconds&gt;23000;

SELECT * FROM tracks WHERE Bytes&gt;(SELECT avg(Bytes) FROM tracks);

SELECT BillingCountry, InvoiceDate FROM invoices WHERE InvoiceDate&gt;&quot;2010-01-01&quot; GROUP BY BillingCountry;
SELECT BillingCountry, sum(total) FROM invoices GROUP BY BillingCountry HAVING sum(total)&gt;40;

SELECT BillingCountry, InvoiceDate FROM invoices  GROUP BY BillingCountry HAVING InvoiceDate&gt;&quot;2010-01-01&quot;;
 





















</sql><current_tab id="0"/></tab_sql></sqlb_project>
